// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto(in *jlexer.Lexer, out *UserTokenDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.User).UnmarshalEasyJSON(in)
			}
		case "token":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Token = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto(out *jwriter.Writer, in UserTokenDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserTokenDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserTokenDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserTokenDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserTokenDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto1(in *jlexer.Lexer, out *UserDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.ID).UnmarshalText(data))
				}
			}
		case "username":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Username = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Email = string(in.String())
			}
		case "image":
			if in.IsNull() {
				in.Skip()
			} else {
				out.AvatarUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto1(out *jwriter.Writer, in UserDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto1(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto2(in *jlexer.Lexer, out *RegisterRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "role":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Role = string(in.String())
			}
		case "username":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Username = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Email = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Password = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto2(out *jwriter.Writer, in RegisterRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto2(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto3(in *jlexer.Lexer, out *LoginRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "email":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Email = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Password = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto3(out *jwriter.Writer, in LoginRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesAuthDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesAuthDto3(l, v)
}
