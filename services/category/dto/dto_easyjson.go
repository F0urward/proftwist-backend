// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto(in *jlexer.Lexer, out *UpdateCategoryRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Name = string(in.String())
				}
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Description = string(in.String())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto(out *jwriter.Writer, in UpdateCategoryRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCategoryRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCategoryRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCategoryRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCategoryRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto1(in *jlexer.Lexer, out *GetAllCategoriesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]CategoryResponse, 0, 0)
					} else {
						out.Categories = []CategoryResponse{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CategoryResponse
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.Categories = append(out.Categories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto1(out *jwriter.Writer, in GetAllCategoriesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix[1:])
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Categories {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllCategoriesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllCategoriesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllCategoriesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllCategoriesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto1(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto2(in *jlexer.Lexer, out *CreateCategoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "category":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Category).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto2(out *jwriter.Writer, in CreateCategoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		(in.Category).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCategoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCategoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCategoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCategoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto2(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto3(in *jlexer.Lexer, out *CreateCategoryRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto3(out *jwriter.Writer, in CreateCategoryRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCategoryRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCategoryRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCategoryRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCategoryRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto3(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto4(in *jlexer.Lexer, out *CategoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "category_id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.CategoryID).UnmarshalText(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto4(out *jwriter.Writer, in CategoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.CategoryID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesCategoryDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesCategoryDto4(l, v)
}
