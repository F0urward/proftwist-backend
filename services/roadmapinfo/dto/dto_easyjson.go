// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(in *jlexer.Lexer, out *UpdateRoadmapInfoRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "category_id":
			if in.IsNull() {
				in.Skip()
				out.CategoryID = nil
			} else {
				if out.CategoryID == nil {
					out.CategoryID = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.CategoryID = string(in.String())
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Name = string(in.String())
				}
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Description = string(in.String())
				}
			}
		case "is_public":
			if in.IsNull() {
				in.Skip()
				out.IsPublic = nil
			} else {
				if out.IsPublic == nil {
					out.IsPublic = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.IsPublic = bool(in.Bool())
				}
			}
		case "referenced_roadmap_info_id":
			if in.IsNull() {
				in.Skip()
				out.ReferencedRoadmapInfoID = nil
			} else {
				if out.ReferencedRoadmapInfoID == nil {
					out.ReferencedRoadmapInfoID = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.ReferencedRoadmapInfoID = string(in.String())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(out *jwriter.Writer, in UpdateRoadmapInfoRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CategoryID != nil {
		const prefix string = ",\"category_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.CategoryID))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.IsPublic != nil {
		const prefix string = ",\"is_public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsPublic))
	}
	if in.ReferencedRoadmapInfoID != nil {
		const prefix string = ",\"referenced_roadmap_info_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ReferencedRoadmapInfoID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateRoadmapInfoRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateRoadmapInfoRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateRoadmapInfoRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateRoadmapInfoRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(in *jlexer.Lexer, out *RoadmapInfoResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ID = string(in.String())
			}
		case "author_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.AuthorID = string(in.String())
			}
		case "category_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.CategoryID = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "is_public":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "referenced_roadmap_info_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ReferencedRoadmapInfoID = string(in.String())
			}
		case "subscriber_count":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SubscriberCount = int(in.Int())
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(out *jwriter.Writer, in RoadmapInfoResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.String(string(in.AuthorID))
	}
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix)
		out.String(string(in.CategoryID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	if in.ReferencedRoadmapInfoID != "" {
		const prefix string = ",\"referenced_roadmap_info_id\":"
		out.RawString(prefix)
		out.String(string(in.ReferencedRoadmapInfoID))
	}
	{
		const prefix string = ",\"subscriber_count\":"
		out.RawString(prefix)
		out.Int(int(in.SubscriberCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoadmapInfoResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoadmapInfoResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoadmapInfoResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoadmapInfoResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto1(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(in *jlexer.Lexer, out *GetByIDRoadmapInfoResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmap_info":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.RoadmapInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(out *jwriter.Writer, in GetByIDRoadmapInfoResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmap_info\":"
		out.RawString(prefix[1:])
		(in.RoadmapInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByIDRoadmapInfoResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByIDRoadmapInfoResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByIDRoadmapInfoResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByIDRoadmapInfoResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto2(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(in *jlexer.Lexer, out *GetAllRoadmapsInfoResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmaps_info":
			if in.IsNull() {
				in.Skip()
				out.RoadmapsInfo = nil
			} else {
				in.Delim('[')
				if out.RoadmapsInfo == nil {
					if !in.IsDelim(']') {
						out.RoadmapsInfo = make([]RoadmapInfoResponseDTO, 0, 0)
					} else {
						out.RoadmapsInfo = []RoadmapInfoResponseDTO{}
					}
				} else {
					out.RoadmapsInfo = (out.RoadmapsInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RoadmapInfoResponseDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.RoadmapsInfo = append(out.RoadmapsInfo, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(out *jwriter.Writer, in GetAllRoadmapsInfoResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmaps_info\":"
		out.RawString(prefix[1:])
		if in.RoadmapsInfo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.RoadmapsInfo {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllRoadmapsInfoResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllRoadmapsInfoResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllRoadmapsInfoResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllRoadmapsInfoResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto3(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(in *jlexer.Lexer, out *CreateRoadmapInfoRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "author_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.AuthorID = string(in.String())
			}
		case "category_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.CategoryID = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "is_public":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "referenced_roadmap_info_id":
			if in.IsNull() {
				in.Skip()
				out.ReferencedRoadmapInfoID = nil
			} else {
				if out.ReferencedRoadmapInfoID == nil {
					out.ReferencedRoadmapInfoID = new(string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.ReferencedRoadmapInfoID = string(in.String())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(out *jwriter.Writer, in CreateRoadmapInfoRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AuthorID))
	}
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix)
		out.String(string(in.CategoryID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	if in.ReferencedRoadmapInfoID != nil {
		const prefix string = ",\"referenced_roadmap_info_id\":"
		out.RawString(prefix)
		out.String(string(*in.ReferencedRoadmapInfoID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRoadmapInfoRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRoadmapInfoRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRoadmapInfoRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRoadmapInfoRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapinfoDto4(l, v)
}
