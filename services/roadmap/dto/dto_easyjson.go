// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(in *jlexer.Lexer, out *UpdateRoadmapResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmap":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Roadmap).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(out *jwriter.Writer, in UpdateRoadmapResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmap\":"
		out.RawString(prefix[1:])
		(in.Roadmap).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateRoadmapResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateRoadmapResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateRoadmapResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateRoadmapResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(in *jlexer.Lexer, out *UpdateRoadmapRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "isPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]NodeDTO, 0, 0)
					} else {
						out.Nodes = []NodeDTO{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 NodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]EdgeDTO, 0, 1)
					} else {
						out.Edges = []EdgeDTO{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v2 EdgeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v2).UnmarshalEasyJSON(in)
					}
					out.Edges = append(out.Edges, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(out *jwriter.Writer, in UpdateRoadmapRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"isPublic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Nodes {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Edges) != 0 {
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Edges {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateRoadmapRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateRoadmapRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateRoadmapRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateRoadmapRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(in *jlexer.Lexer, out *RoadmapDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "_id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.ID).UnmarshalJSON(data))
				}
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]NodeDTO, 0, 0)
					} else {
						out.Nodes = []NodeDTO{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 NodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v7).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]EdgeDTO, 0, 1)
					} else {
						out.Edges = []EdgeDTO{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v8 EdgeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v8).UnmarshalEasyJSON(in)
					}
					out.Edges = append(out.Edges, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(out *jwriter.Writer, in RoadmapDTO) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Nodes {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Edges) != 0 {
		const prefix string = ",\"edges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Edges {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoadmapDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoadmapDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoadmapDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoadmapDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "x":
			if in.IsNull() {
				in.Skip()
			} else {
				out.X = float64(in.Float64())
			}
		case "y":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Y = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(in *jlexer.Lexer, out *NodeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "label":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Label = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(out *jwriter.Writer, in NodeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix[1:])
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(in *jlexer.Lexer, out *NodeDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.ID).UnmarshalText(data))
				}
			}
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Position).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Data).UnmarshalEasyJSON(in)
			}
		case "measured":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Measured).UnmarshalEasyJSON(in)
			}
		case "selected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Selected = bool(in.Bool())
			}
		case "dragging":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Dragging = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(out *jwriter.Writer, in NodeDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		(in.Position).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"measured\":"
		out.RawString(prefix)
		(in.Measured).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"selected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Selected))
	}
	{
		const prefix string = ",\"dragging\":"
		out.RawString(prefix)
		out.Bool(bool(in.Dragging))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(in *jlexer.Lexer, out *Measured) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "width":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Width = float64(in.Float64())
			}
		case "height":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Height = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(out *jwriter.Writer, in Measured) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Float64(float64(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Measured) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Measured) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Measured) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Measured) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(in *jlexer.Lexer, out *GetByIDRoadmapResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmap":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Roadmap).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(out *jwriter.Writer, in GetByIDRoadmapResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmap\":"
		out.RawString(prefix[1:])
		(in.Roadmap).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByIDRoadmapResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByIDRoadmapResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByIDRoadmapResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByIDRoadmapResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(in *jlexer.Lexer, out *GetAllRoadmapsResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmaps":
			if in.IsNull() {
				in.Skip()
				out.Roadmaps = nil
			} else {
				in.Delim('[')
				if out.Roadmaps == nil {
					if !in.IsDelim(']') {
						out.Roadmaps = make([]RoadmapDTO, 0, 0)
					} else {
						out.Roadmaps = []RoadmapDTO{}
					}
				} else {
					out.Roadmaps = (out.Roadmaps)[:0]
				}
				for !in.IsDelim(']') {
					var v13 RoadmapDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v13).UnmarshalEasyJSON(in)
					}
					out.Roadmaps = append(out.Roadmaps, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(out *jwriter.Writer, in GetAllRoadmapsResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmaps\":"
		out.RawString(prefix[1:])
		if in.Roadmaps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Roadmaps {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllRoadmapsResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllRoadmapsResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllRoadmapsResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllRoadmapsResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto8(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(in *jlexer.Lexer, out *GenerateRoadmapResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roadmapId":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.RoadmapID).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(out *jwriter.Writer, in GenerateRoadmapResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roadmapId\":"
		out.RawString(prefix[1:])
		out.Raw((in.RoadmapID).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenerateRoadmapResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenerateRoadmapResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenerateRoadmapResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenerateRoadmapResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto9(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(in *jlexer.Lexer, out *GenerateRoadmapRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Content = string(in.String())
			}
		case "complexity":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Complexity = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(out *jwriter.Writer, in GenerateRoadmapRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"complexity\":"
		out.RawString(prefix)
		out.String(string(in.Complexity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenerateRoadmapRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenerateRoadmapRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenerateRoadmapRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenerateRoadmapRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto10(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(in *jlexer.Lexer, out *GenerateRoadmapDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "Topic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Topic = string(in.String())
			}
		case "Description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "Content":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Content = string(in.String())
			}
		case "Complexity":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Complexity = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(out *jwriter.Writer, in GenerateRoadmapDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"Complexity\":"
		out.RawString(prefix)
		out.String(string(in.Complexity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenerateRoadmapDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenerateRoadmapDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenerateRoadmapDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenerateRoadmapDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto11(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(in *jlexer.Lexer, out *EdgeDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "source":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Source = string(in.String())
			}
		case "target":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Target = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(out *jwriter.Writer, in EdgeDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EdgeDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EdgeDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EdgeDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EdgeDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto12(l, v)
}
