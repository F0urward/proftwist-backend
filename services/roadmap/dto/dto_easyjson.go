// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	entities "github.com/F0urward/proftwist-backend/internal/entities"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(in *jlexer.Lexer, out *UpdateRoadmapRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "IsPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "categoryId":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CategoryID).UnmarshalJSON(data))
				}
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]RoadmapNodeDTO, 0, 0)
					} else {
						out.Nodes = []RoadmapNodeDTO{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RoadmapNodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(out *jwriter.Writer, in UpdateRoadmapRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"IsPublic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix)
		out.Raw((in.CategoryID).MarshalJSON())
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Nodes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateRoadmapRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateRoadmapRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateRoadmapRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateRoadmapRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(in *jlexer.Lexer, out *UpdatePrivacyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Message = string(in.String())
			}
		case "isPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "roadmapId":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.RoadmapID).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(out *jwriter.Writer, in UpdatePrivacyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"isPublic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"roadmapId\":"
		out.RawString(prefix)
		out.Raw((in.RoadmapID).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePrivacyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePrivacyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePrivacyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePrivacyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto1(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(in *jlexer.Lexer, out *UpdatePrivacyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "isPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(out *jwriter.Writer, in UpdatePrivacyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isPublic\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsPublic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePrivacyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePrivacyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePrivacyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePrivacyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto2(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(in *jlexer.Lexer, out *RoadmapNodeDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.ID).UnmarshalText(data))
				}
			}
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "position":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Position).UnmarshalEasyJSON(in)
			}
		case "author_id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.AuthorID).UnmarshalText(data))
				}
			}
		case "level":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Level = int(in.Int())
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]Link, 0, 1)
					} else {
						out.Links = []Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Link
					if in.IsNull() {
						in.Skip()
					} else {
						(v4).UnmarshalEasyJSON(in)
					}
					out.Links = append(out.Links, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]RoadmapNodeDTO, 0, 0)
					} else {
						out.Children = []RoadmapNodeDTO{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v5 RoadmapNodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v5).UnmarshalEasyJSON(in)
					}
					out.Children = append(out.Children, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(out *jwriter.Writer, in RoadmapNodeDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		(in.Position).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.RawText((in.AuthorID).MarshalText())
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Links {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Children) != 0 {
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Children {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoadmapNodeDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoadmapNodeDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoadmapNodeDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoadmapNodeDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto3(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(in *jlexer.Lexer, out *RoadmapDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.ID).UnmarshalJSON(data))
				}
			}
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "IsPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "subCount":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SubCount = int(in.Int())
			}
		case "categoryId":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CategoryID).UnmarshalJSON(data))
				}
			}
		case "author_id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.AuthorID).UnmarshalText(data))
				}
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]RoadmapNodeDTO, 0, 0)
					} else {
						out.Nodes = []RoadmapNodeDTO{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 RoadmapNodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v10).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(out *jwriter.Writer, in RoadmapDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"IsPublic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"subCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubCount))
	}
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix)
		out.Raw((in.CategoryID).MarshalJSON())
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.RawText((in.AuthorID).MarshalText())
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Nodes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoadmapDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoadmapDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoadmapDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoadmapDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto4(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "x":
			if in.IsNull() {
				in.Skip()
			} else {
				out.X = float64(in.Float64())
			}
		case "y":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Y = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto5(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
			} else {
				out.URL = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = entities.LinkType(in.String())
			}
		case "author_id":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((out.AuthorID).UnmarshalText(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.RawText((in.AuthorID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto6(l, v)
}
func easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(in *jlexer.Lexer, out *CreateRoadmapRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Description = string(in.String())
			}
		case "IsPublic":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IsPublic = bool(in.Bool())
			}
		case "subCount":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SubCount = int(in.Int())
			}
		case "categoryId":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.CategoryID).UnmarshalJSON(data))
				}
			}
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]RoadmapNodeDTO, 0, 0)
					} else {
						out.Nodes = []RoadmapNodeDTO{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 RoadmapNodeDTO
					if in.IsNull() {
						in.Skip()
					} else {
						(v13).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(out *jwriter.Writer, in CreateRoadmapRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"IsPublic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"subCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubCount))
	}
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix)
		out.Raw((in.CategoryID).MarshalJSON())
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Nodes {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRoadmapRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRoadmapRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRoadmapRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRoadmapRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComF0urwardProftwistBackendServicesRoadmapDto7(l, v)
}
