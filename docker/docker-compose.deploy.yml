services:
  migrator:
    image: golang:1.22-alpine
    container_name: proftwist_migrator
    env_file: .env
    command:
      - /bin/sh
      - -c
      - |
        set -e
        apk add --no-cache git
        GOBIN=/usr/local/bin go install github.com/pressly/goose/v3/cmd/goose@v3.18.0
        goose -dir /migrations postgres "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable" up
    volumes:
      - ../db/migrations:/migrations:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - proftwist-network

  proftwist:
    container_name: proftwist
    env_file: .env
    image: rasulovarsen/proftwist-backend:latest
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      migrator:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - proftwist-network
    labels:
      - com.centurylinklabs.watchtower.enable=true

  postgres:
    image: postgres:15
    container_name: proftwist_postgres
    ports:
      - "5434:5432"
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 3
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proftwist-network

  pgweb:
    image: sosedoff/pgweb
    container_name: proftwist_pgweb
    ports:
      - "8082:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgres
    networks:
      - proftwist-network

  mongo:
    image: mongo:5.0
    container_name: proftwist_mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    restart: on-failure
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:27017/${MONGO_DB}?authSource=admin --quiet
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    volumes:
      - mongo_data:/data/db
    networks:
      - proftwist-network

  mongo-express:
    image: mongo-express
    container_name: proftwist_mongo_express
    ports:
      - "8083:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-password}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - proftwist-network

  redis:
    image: redis:alpine
    container_name: proftwist_redis
    command: redis-server --bind 0.0.0.0 --port 6379 --requirepass ${REDIS_PASSWORD}
    ports:
      - "6380:6379" # Измените на свободный порт
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - proftwist-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: proftwist_redis_commander
    ports:
      - "8084:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HTTP_USER=${REDIS_COMMANDER_USER}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - proftwist-network

  minio:
    image: minio/minio:latest
    container_name: proftwist_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    volumes:
      - minio_data:/data
    networks:
      - proftwist-network

  watchtower:
    image: containrrr/watchtower:1.7.1
    container_name: proftwist_watchtower
    command: --label-enable --cleanup --interval 30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - proftwist-network
volumes:
  postgres_data:
  mongo_data:
  redis_data:
  minio_data:

networks:
  proftwist-network:
