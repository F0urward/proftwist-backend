// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/F0urward/proftwist-backend/config"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/client/gigachatclient"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/client/vkclient"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/db/aws"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/db/mongo"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/db/postgres"
	"github.com/F0urward/proftwist-backend/internal/infrastructure/db/redis"
	"github.com/F0urward/proftwist-backend/internal/server/http"
	"github.com/F0urward/proftwist-backend/internal/server/middleware/auth"
	"github.com/F0urward/proftwist-backend/internal/server/middleware/cors"
	http5 "github.com/F0urward/proftwist-backend/services/auth/delivery/http"
	repository4 "github.com/F0urward/proftwist-backend/services/auth/repository"
	usecase3 "github.com/F0urward/proftwist-backend/services/auth/usecase"
	http4 "github.com/F0urward/proftwist-backend/services/category/delivery/http"
	repository3 "github.com/F0urward/proftwist-backend/services/category/repository"
	usecase2 "github.com/F0urward/proftwist-backend/services/category/usecase"
	http3 "github.com/F0urward/proftwist-backend/services/roadmap/delivery/http"
	repository2 "github.com/F0urward/proftwist-backend/services/roadmap/repository"
	"github.com/F0urward/proftwist-backend/services/roadmap/usecase"
	http2 "github.com/F0urward/proftwist-backend/services/roadmapinfo/delivery/http"
	"github.com/F0urward/proftwist-backend/services/roadmapinfo/repository"
	"github.com/F0urward/proftwist-backend/services/roadmapinfo/usecase"
)

// Injectors from wire.go:

func InitializeHttpServer(cfg *config.Config) *http.HttpServer {
	db := postgres.NewDatabase(cfg)
	roadmapinfoRepository := repository.NewRoadmapInfoRepository(db)
	client := mongo.NewClient(cfg)
	database := mongo.NewDatabase(client, cfg)
	mongoRepository := repository2.NewRoadmapMongoRepository(database)
	gigachatclientClient := gigachatclient.NewGigaChatClient(cfg)
	gigachatWebapi := repository2.NewRoadmapGigaChatWebapi(gigachatclientClient)
	roadmapUsecase := roadmap.NewRoadmapUsecase(mongoRepository, gigachatWebapi, roadmapinfoRepository)
	roadmapinfoUsecase := usecase.NewRoadmapInfoUsecase(roadmapinfoRepository, mongoRepository, roadmapUsecase)
	handlers := http2.NewRoadmapInfoHandlers(roadmapinfoUsecase)
	roadmapHandlers := http3.NewRoadmapHandlers(roadmapUsecase, roadmapinfoUsecase)
	categoryRepository := repository3.NewCategoryRepository(db)
	categoryUsecase := usecase2.NewCategoryUsecase(categoryRepository)
	categoryHandlers := http4.NewCategoryHandlers(categoryUsecase)
	postgresRepository := repository4.NewAuthPostgresRepository(db)
	redisClient := redis.NewClient(cfg)
	redisRepository := repository4.NewAuthRedisRepository(redisClient, cfg)
	minioClient := aws.NewClient(cfg)
	awsRepository := repository4.NewAuthAWSRepository(minioClient)
	vkClient := vkclient.NewVKClient(cfg)
	vkWebapi := repository4.NewVKAuthWebapi(vkClient)
	authUsecase := usecase3.NewAuthUsecase(postgresRepository, redisRepository, awsRepository, vkWebapi, cfg)
	authHandlers := http5.NewAuthHandlers(authUsecase, cfg)
	authMiddleware := auth.NewAuthMiddleware(redisRepository, cfg)
	corsMiddleware := cors.NewCORSMiddleware(cfg)
	httpServer := http.New(cfg, handlers, roadmapHandlers, categoryHandlers, authHandlers, authMiddleware, corsMiddleware)
	return httpServer
}
